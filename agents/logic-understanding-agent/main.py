"""Logic Understanding Agent - Natural Marketplace Financial Analyst"""
import os
from typing import Optional, Dict
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import vertexai
from vertexai.generative_models import GenerativeModel, GenerationConfig
import httpx

app = FastAPI(title="Logic Understanding Agent - Marketplace Expert")

# Configuration
PROJECT_ID = os.getenv("PROJECT_ID", "financial-reports-ai-2024")
LOCATION = os.getenv("REGION", "us-central1")
REPORT_READER_URL = os.getenv("REPORT_READER_URL", "https://report-reader-agent-38390150695.us-central1.run.app")

vertexai.init(project=PROJECT_ID, location=LOCATION)

# –ù–û–í–´–ô —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç - —á–µ–ª–æ–≤–µ—á–Ω—ã–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
SYSTEM_INSTRUCTION = """–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.

üéØ –¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
- –û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏
- –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω (2-4 –∞–±–∑–∞—Ü–∞ –º–∞–∫—Å–∏–º—É–º)
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–∂–Ω–æ–≥–æ, —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π)
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ

üìä –¢–í–û–Ø –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:
–ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ (Wildberries, Ozon, –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç):
- –ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞
- –ö–æ–º–∏—Å—Å–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã
- –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
- –í–æ–∑–≤—Ä–∞—Ç—ã –∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è

‚úÖ –ö–ê–ö –û–¢–í–ï–ß–ê–¢–¨:

–ï–°–õ–ò –ù–ï–¢ –§–ê–ô–õ–ê:
"–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥–∞—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.

–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–π –æ—Ç—á–µ—Ç —Å–ª–µ–≤–∞ (Excel –∏–ª–∏ CSV), –∏ —è:
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫—É
‚Ä¢ –ü–æ–∫–∞–∂—É –¥–∏–Ω–∞–º–∏–∫—É
‚Ä¢ –ù–∞–π–¥—É –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ –î–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"

–ï–°–õ–ò –ï–°–¢–¨ –§–ê–ô–õ:
1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–æ–≤–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (–∫—Ä–∞—Ç–∫–æ!)
2. –í—ã–¥–µ–ª–∏ **—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ** –∂–∏—Ä–Ω—ã–º
3. –ó–∞–¥–∞–π 1-2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

–ü–†–ò–ú–ï–† –•–û–†–û–®–ï–ì–û –û–¢–í–ï–¢–ê:
"üìä –í–∏–∂—É –æ—Ç—á–µ—Ç –∑–∞ —è–Ω–≤–∞—Ä—å —Å **156 —Å—Ç—Ä–æ–∫–∞–º–∏**. 

**–ö–ª—é—á–µ–≤—ã–µ —Ü–∏—Ñ—Ä—ã:**
‚Ä¢ –í—ã—Ä—É—á–∫–∞: 1.2–ú —Ä—É–±
‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: 450 —à—Ç
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 2,670 —Ä—É–±

üìà –í—ã—Ä—É—á–∫–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 18% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É ‚Äî –æ—Ç–ª–∏—á–Ω–æ!

üí° –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–¥—Å–∫–∞–∂–∏:
‚Ä¢ –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä?
‚Ä¢ –ï—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å?"

‚ùå –ó–ê–ü–†–ï–©–ï–ù–û:
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (—Ç–∏–ø–∞ "## –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞...")
- –î–ª–∏–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–∞–∫—Å 2 –≤–æ–ø—Ä–æ—Å–∞)
- –û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã (–Ω–µ –ø—Ä–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã)
- –°—Ç–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –§–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–æ–±–æ-—è–∑—ã–∫

üí¨ –°–¢–ò–õ–¨:
- –ö–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫-—ç–∫—Å–ø–µ—Ä—Ç
- –° —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
- –° —ç–º–ø–∞—Ç–∏–µ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

# Model configuration
generation_config = GenerationConfig(
    temperature=0.4,  # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é
    top_p=0.9,
    top_k=40,
    max_output_tokens=600,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
)

model = GenerativeModel(
    "gemini-2.0-flash-exp",
    system_instruction=SYSTEM_INSTRUCTION,  # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û!
    generation_config=generation_config
)

class AnalyzeRequest(BaseModel):
    query: str
    report_id: Optional[str] = None
    context: Optional[Dict] = None
    options: Optional[Dict] = None

class AnalyzeResponse(BaseModel):
    status: str
    insights: str
    agent_mode: str = "marketplace_expert"
    metadata: Dict = {}

async def read_file_from_storage(file_path: str) -> Dict:
    """Read file using report-reader-agent"""
    try:
        endpoint = f"{REPORT_READER_URL}/read/storage"
        payload = {"file_path": file_path}
        
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(endpoint, json=payload)
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"Report reader failed: {response.status_code}"}
    
    except Exception as e:
        return {"error": f"Failed to read file: {str(e)}"}

@app.get("/health")
async def health():
    return {
        "status": "healthy",
        "agent": "marketplace-financial-analyst",
        "model": "gemini-2.0-flash-exp",
        "specialization": "marketplace_reports",
        "system_instruction_enabled": True,
        "natural_conversation": True
    }

@app.post("/analyze", response_model=AnalyzeResponse)
async def analyze_report(request: AnalyzeRequest):
    """AI analysis with natural conversation"""
    try:
        file_data = None
        has_file = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if request.context and "file_path" in request.context:
            file_path = request.context["file_path"]
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            file_result = await read_file_from_storage(file_path)
            
            if "error" not in file_result and "data" in file_result:
                file_data = file_result
                has_file = True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        if has_file and file_data:
            # –ï–°–¢–¨ —Ñ–∞–π–ª - –¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data_info = file_data["data"]
            rows_count = data_info.get("rows", 0)
            columns = data_info.get("columns", [])
            sample = data_info.get("data", [])[:5]
            
            prompt = f"""–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ó–ê–ì–†–£–ñ–ï–ù –§–ê–ô–õ! üìä

–î–ê–ù–ù–´–ï:
- –°—Ç—Ä–æ–∫: {rows_count}
- –°—Ç–æ–ª–±—Ü—ã: {', '.join(columns[:10])}
- –û–±—Ä–∞–∑–µ—Ü –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫: {sample}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{request.query}"

–û–¢–í–ï–¢–¨:
1. –ö—Ä–∞—Ç–∫–æ –Ω–∞–∑–æ–≤–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (2-3 –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è)
2. –í—ã–¥–µ–ª–∏ **–∫–ª—é—á–µ–≤–æ–π –∏–Ω—Å–∞–π—Ç** –∂–∏—Ä–Ω—ã–º
3. –ó–∞–¥–∞–π 1-2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

–ú–∞–∫—Å–∏–º—É–º 4 –∞–±–∑–∞—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        
        else:
            # –ù–ï–¢ —Ñ–∞–π–ª–∞ - –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –æ–±—ä—è—Å–Ω—è–µ–º
            prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "{request.query}"

–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

–û–¢–í–ï–¢–¨ –ø–æ —Å–≤–æ–µ–π —Ä–æ–ª–∏ (–∞–Ω–∞–ª–∏—Ç–∏–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤):
- –î—Ä—É–∂–µ–ª—é–±–Ω–æ
- –ö—Ä–∞—Ç–∫–æ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ü–æ–ø—Ä–æ—Å–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
- –û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = model.generate_content(prompt)
        
        return AnalyzeResponse(
            status="completed",
            insights=response.text,
            agent_mode="marketplace_expert",
            metadata={
                "model": "gemini-2.0-flash-exp",
                "has_file_data": has_file,
                "rows_analyzed": rows_count if has_file else 0,
                "natural_conversation": True
            }
        )
    
    except Exception as e:
        if "429" in str(e) or "Resource exhausted" in str(e):
            raise HTTPException(
                status_code=429, 
                detail="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! ‚è±Ô∏è"
            )
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/test-connection")
async def test_report_reader():
    """Test connection to report-reader-agent"""
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{REPORT_READER_URL}/health")
            return {
                "report_reader_status": response.status_code,
                "report_reader_url": REPORT_READER_URL,
                "response": response.json() if response.status_code == 200 else response.text
            }
    except Exception as e:
        return {
            "error": str(e),
            "report_reader_url": REPORT_READER_URL
        }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080)
