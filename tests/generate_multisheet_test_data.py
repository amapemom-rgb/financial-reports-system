"""Generate test Excel file with 30+ sheets for Multi-Sheet Intelligence testing

This script creates a realistic financial report with multiple sheets
containing sales, expenses, transactions, and other marketplace data.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random

def generate_sales_data(num_rows=100):
    """Generate sales data"""
    start_date = datetime(2024, 1, 1)
    dates = [start_date + timedelta(days=i) for i in range(num_rows)]
    
    products = ['Product_A', 'Product_B', 'Product_C', 'Product_D', 'Product_E']
    categories = ['Electronics', 'Clothing', 'Food', 'Home', 'Sports']
    
    return pd.DataFrame({
        '–î–∞—Ç–∞': dates,
        '–¢–æ–≤–∞—Ä': [random.choice(products) for _ in range(num_rows)],
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': [random.choice(categories) for _ in range(num_rows)],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': np.random.randint(1, 50, num_rows),
        '–¶–µ–Ω–∞': np.random.uniform(10, 1000, num_rows).round(2),
        '–í—ã—Ä—É—á–∫–∞': [0] * num_rows,  # Will calculate
    })

def generate_expenses_data(num_rows=80):
    """Generate expenses data"""
    start_date = datetime(2024, 1, 1)
    dates = [start_date + timedelta(days=i*3) for i in range(num_rows)]
    
    expense_types = ['–†–µ–∫–ª–∞–º–∞', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞', '–ê—Ä–µ–Ω–¥–∞', '–ó–∞—Ä–ø–ª–∞—Ç—ã', '–ö–æ–º–∏—Å—Å–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞']
    
    return pd.DataFrame({
        '–î–∞—Ç–∞': dates,
        '–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞': [random.choice(expense_types) for _ in range(num_rows)],
        '–°—É–º–º–∞': np.random.uniform(1000, 50000, num_rows).round(2),
        '–û–ø–∏—Å–∞–Ω–∏–µ': [f'–ü–ª–∞—Ç–µ–∂ #{i}' for i in range(num_rows)],
    })

def generate_transactions_data(num_rows=150):
    """Generate transaction data"""
    start_date = datetime(2024, 1, 1)
    dates = [start_date + timedelta(hours=i*4) for i in range(num_rows)]
    
    statuses = ['–û–ø–ª–∞—á–µ–Ω', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω', '–û—Ç–º–µ–Ω–µ–Ω']
    
    return pd.DataFrame({
        '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è': dates,
        'ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': [f'TXN{1000 + i}' for i in range(num_rows)],
        '–°—É–º–º–∞': np.random.uniform(100, 5000, num_rows).round(2),
        '–°—Ç–∞—Ç—É—Å': [random.choice(statuses) for _ in range(num_rows)],
        '–†–µ–≥–∏–æ–Ω': [random.choice(['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å']) for _ in range(num_rows)],
    })

def generate_customers_data(num_rows=200):
    """Generate customer data"""
    return pd.DataFrame({
        'ID –∫–ª–∏–µ–Ω—Ç–∞': [f'CUST{100 + i}' for i in range(num_rows)],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤': np.random.randint(1, 20, num_rows),
        '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫': np.random.uniform(500, 5000, num_rows).round(2),
        '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞': np.random.uniform(1000, 50000, num_rows).round(2),
        '–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞': [datetime(2023, random.randint(1, 12), random.randint(1, 28)) for _ in range(num_rows)],
    })

def generate_products_data(num_rows=50):
    """Generate product catalog data"""
    categories = ['Electronics', 'Clothing', 'Food', 'Home', 'Sports']
    
    return pd.DataFrame({
        'SKU': [f'SKU{1000 + i}' for i in range(num_rows)],
        '–ù–∞–∑–≤–∞–Ω–∏–µ': [f'–¢–æ–≤–∞—Ä {i}' for i in range(num_rows)],
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': [random.choice(categories) for _ in range(num_rows)],
        '–¶–µ–Ω–∞': np.random.uniform(100, 10000, num_rows).round(2),
        '–ù–∞ —Å–∫–ª–∞–¥–µ': np.random.randint(0, 500, num_rows),
        '–ü—Ä–æ–¥–∞–Ω–æ (—à—Ç)': np.random.randint(0, 1000, num_rows),
    })

def generate_monthly_summary():
    """Generate monthly summary data"""
    months = pd.date_range('2024-01-01', periods=12, freq='ME')
    
    return pd.DataFrame({
        '–ú–µ—Å—è—Ü': months,
        '–í—ã—Ä—É—á–∫–∞': np.random.uniform(100000, 500000, 12).round(2),
        '–†–∞—Å—Ö–æ–¥—ã': np.random.uniform(50000, 200000, 12).round(2),
        '–ü—Ä–∏–±—ã–ª—å': [0] * 12,  # Will calculate
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤': np.random.randint(100, 1000, 12),
        '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫': np.random.uniform(1000, 5000, 12).round(2),
    })

def create_test_excel(filename='test_multisheet_report.xlsx', num_sheets=30):
    """Create Excel file with multiple sheets
    
    Args:
        filename: Output filename
        num_sheets: Number of sheets to create (default 30)
    """
    print(f"üìä Creating test Excel file with {num_sheets} sheets...")
    
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        # Core sheets (realistic data)
        print("  Creating core data sheets...")
        
        # Sheet 1-5: Sales data by region
        regions = ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥']
        for i, region in enumerate(regions, 1):
            df = generate_sales_data(num_rows=80 + i*10)
            df['–†–µ–≥–∏–æ–Ω'] = region
            df['–í—ã—Ä—É—á–∫–∞'] = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] * df['–¶–µ–Ω–∞']
            df.to_excel(writer, sheet_name=f'–ü—Ä–æ–¥–∞–∂–∏_{region}', index=False)
            print(f"    ‚úÖ Sheet {i}: –ü—Ä–æ–¥–∞–∂–∏_{region} ({len(df)} rows)")
        
        # Sheet 6: Total sales
        df_sales = generate_sales_data(num_rows=200)
        df_sales['–í—ã—Ä—É—á–∫–∞'] = df_sales['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] * df_sales['–¶–µ–Ω–∞']
        df_sales.to_excel(writer, sheet_name='–ü—Ä–æ–¥–∞–∂–∏_–í—Å–µ–≥–æ', index=False)
        print(f"    ‚úÖ Sheet 6: –ü—Ä–æ–¥–∞–∂–∏_–í—Å–µ–≥–æ ({len(df_sales)} rows)")
        
        # Sheet 7: Expenses
        df_expenses = generate_expenses_data(num_rows=120)
        df_expenses.to_excel(writer, sheet_name='–†–∞—Å—Ö–æ–¥—ã', index=False)
        print(f"    ‚úÖ Sheet 7: –†–∞—Å—Ö–æ–¥—ã ({len(df_expenses)} rows)")
        
        # Sheet 8: Transactions
        df_transactions = generate_transactions_data(num_rows=250)
        df_transactions.to_excel(writer, sheet_name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', index=False)
        print(f"    ‚úÖ Sheet 8: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ({len(df_transactions)} rows)")
        
        # Sheet 9: Customers
        df_customers = generate_customers_data(num_rows=300)
        df_customers.to_excel(writer, sheet_name='–ö–ª–∏–µ–Ω—Ç—ã', index=False)
        print(f"    ‚úÖ Sheet 9: –ö–ª–∏–µ–Ω—Ç—ã ({len(df_customers)} rows)")
        
        # Sheet 10: Products
        df_products = generate_products_data(num_rows=60)
        df_products.to_excel(writer, sheet_name='–¢–æ–≤–∞—Ä—ã', index=False)
        print(f"    ‚úÖ Sheet 10: –¢–æ–≤–∞—Ä—ã ({len(df_products)} rows)")
        
        # Sheet 11: Monthly summary
        df_monthly = generate_monthly_summary()
        df_monthly['–ü—Ä–∏–±—ã–ª—å'] = df_monthly['–í—ã—Ä—É—á–∫–∞'] - df_monthly['–†–∞—Å—Ö–æ–¥—ã']
        df_monthly.to_excel(writer, sheet_name='–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è_—Å–≤–æ–¥–∫–∞', index=False)
        print(f"    ‚úÖ Sheet 11: –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è_—Å–≤–æ–¥–∫–∞ ({len(df_monthly)} rows)")
        
        # Additional sheets to reach target count
        print(f"  Creating additional sheets (12-{num_sheets})...")
        for i in range(12, num_sheets + 1):
            sheet_types = [
                ('–û—Ç—á–µ—Ç', generate_sales_data),
                ('–î–∞–Ω–Ω—ã–µ', generate_transactions_data),
                ('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', generate_expenses_data),
            ]
            sheet_type, generator = random.choice(sheet_types)
            
            df = generator(num_rows=random.randint(30, 100))
            sheet_name = f'{sheet_type}_{i}'
            df.to_excel(writer, sheet_name=sheet_name, index=False)
            
            if i % 5 == 0:
                print(f"    ‚úÖ Sheets 12-{i} created...")
    
    print(f"\n‚úÖ Excel file created: {filename}")
    print(f"üìä Total sheets: {num_sheets}")
    print(f"\nKey sheets for testing:")
    print("  - –ü—Ä–æ–¥–∞–∂–∏_–ú–æ—Å–∫–≤–∞ (largest sales)")
    print("  - –†–∞—Å—Ö–æ–¥—ã (expenses)")
    print("  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (transactions)")
    print("  - –ö–ª–∏–µ–Ω—Ç—ã (customers)")
    print("  - –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è_—Å–≤–æ–¥–∫–∞ (monthly summary)")
    
    return filename

if __name__ == '__main__':
    # Create test file
    filename = create_test_excel(num_sheets=30)
    
    print(f"\nüß™ Test file ready: {filename}")
    print("\nTo test Multi-Sheet Intelligence:")
    print("1. Upload this file to Cloud Storage:")
    print(f"   gsutil cp {filename} gs://financial-reports-ai-2024-reports/test/")
    print("\n2. Send analysis request with file_path:")
    print("   file_path: 'test/test_multisheet_report.xlsx'")
    print("\n3. System should detect 30 sheets and ask which to analyze")
